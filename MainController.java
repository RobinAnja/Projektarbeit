//package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import hello.User;
import hello.UserRepository;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.*;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServlet;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController extends HttpServlet {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private SubjectRepository subjectRepository;




	
	@GetMapping(path="/registration") // Map ONLY GET Requests
	public static @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setEncryptedPassword(passwordEncoder.encode(password));
		userRepository.save(n);
        console.log(name, email, password);
		return "Saved";
	}

	@GetMapping(path="/findByUsername")
	public @ResponseBody boolean findUserByUsername(@RequestParam String username, @RequestParam String password) {
		// This returns a JSON or XML with the users
		List<User> list= userRepository.findAll();
		for(User user: list){
			if(user.getName().equals(username) && passwordEncoder.matches(password,user.getEncryptedPassword())){
				return true;
			}
		}

		return false;
	}

	@GetMapping(path="/findByEmail")
	public @ResponseBody boolean findUserByEmail(@RequestParam String email, @RequestParam String password) {
		// This returns a JSON or XML with the users
		List<User> list= userRepository.findAll();
		for(User user: list){
			if(user.getEmail().equals(email) && passwordEncoder.matches(password,user.getEncryptedPassword())){
				return true;
			}
		}

		return false;
	}

	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path ="/subjects")
	public @ResponseBody Iterable<Subject> showAllSubjects(){
		return subjectRepository.findAll();
	}

	@GetMapping(path="/addSubject") // Map ONLY GET Requests
	public @ResponseBody String addNewSubject (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Subject s = new Subject();
		s.setName(name);
		subjectRepository.save(s);
		return "the Subject has been Saved";
	}
}
